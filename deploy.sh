#!/bin/bash

# A wrapper script to configure and deploy the WarehousePG Terraform cluster.
# It prompts for user-specific variables and creates a terraform.tfvars file.

set -e # Exit immediately if a command exits with a non-zero status.

# --- Function to check for required commands ---
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# --- Welcome Message ---
echo "📦 Welcome to the WarehousePG Terraform Deployment Setup!"
echo "This script will guide you through configuring your cluster."
echo "---"

# --- Dependency Check ---
if ! command_exists terraform || ! command_exists aws; then
  echo "❌ Error: 'terraform' and 'aws' CLI tools are required."
  echo "Please install them and configure your AWS credentials before running this script."
  exit 1
fi

# --- Gather User Input ---
echo "Please provide the following configuration values."
echo "Press [Enter] to accept the default value shown in brackets."
echo ""

# For main.tf
read -p "Enter your AWS IAM Profile Name (e.g., EDBPowerUserIAM-123456789012): " aws_profile

# For variables that will go into terraform.tfvars
read -p "Enter the AWS Region [eu-west-2]: " aws_region
aws_region=${aws_region:-"eu-west-2"}

read -p "Enter the EC2 Instance Type [t3a.medium]: " instance_type
instance_type=${instance_type:-"t3a.medium"}

read -p "Enter a unique name for your cluster [whpg-demo-cluster]: " cluster_name
cluster_name=${cluster_name:-"whpg-demo-cluster"}

read -p "Enter the ip that will SSH to the cluster - ensures that SSH ingress will be granted to ONLY this ip [55.55.55.55]: " jumpbox_ssh_ingress
jumpbox_ssh_ingress=${jumpbox_ssh_ingress:-"55.55.55.55"}

# Use tilde expansion for default paths
default_pub_key="${HOME}/.ssh/id_rsa.pub"
read -p "Enter the path to the SSH PUBLIC KEY that you want to use [${default_pub_key}]: " public_key_path
public_key_path=${public_key_path:-$default_pub_key}

default_priv_key="${HOME}/.ssh/id_rsa"
read -p "Enter the path to the SSH PRIVATE KEY that you want to use [${default_priv_key}]: " private_key_path
private_key_path=${private_key_path:-$default_priv_key}

# For configure-instance.sh
read -p "Enter your EDB Repo Token: " edb_repo_token

# --- Input Validation (basic) ---
if [[ -z "$aws_profile" || -z "$edb_repo_token" ]]; then
    echo "❌ Error: AWS Profile and EDB Repo Token cannot be empty."
    exit 1
fi

echo ""
echo "✅ Configuration received. Preparing files..."

# --- Create terraform.tfvars file ---
# This is the standard Terraform way to override default variables.
cat > terraform.tfvars <<EOF
# This file was auto-generated by the deploy.sh script.
aws_region       = "$aws_region"
instance_type    = "$instance_type"
cluster_name     = "$cluster_name"
public_key_path  = "$public_key_path"
private_key_path = "$private_key_path"
jumpbox_ssh_ingress = "$jumpbox_ssh_ingress"
edb_repo_token  = "$edb_repo_token" # Add this line
EOF

echo "📄 Created terraform.tfvars with your custom values."

# --- Update Files That Are NOT Terraform Variables ---
# Create backups of files we are about to modify
cp main.tf main.tf.bak
#cp configure-instance.sh.tpl configure-instance.sh.tpl.bak
echo "🔒 Backups of original files created (.bak)."

# 1. Update main.tf for the AWS profile
sed -i.bak "s|profile = \".*\"|profile = \"$aws_profile\"|" main.tf
echo "🔧 Updated AWS profile in main.tf"

# 2. Update configure-instance.sh for the EDB repo key
# (Ensure your .sh file has EDB_REPO_TOKEN_PLACEHOLDER in the curl command)
#sed -i.bak "s|EDB_REPO_TOKEN_PLACEHOLDER|$edb_repo_token|" configure-instance.sh
#echo "🔧 Updated EDB Repo Token in configure-instance.sh"

echo ""
echo "🚀 All files have been configured!"

# --- Run Terraform ---
echo ""
echo "Terraform will now initialize and create an execution plan."

terraform init -upgrade

echo ""
echo "Terraform Plan:"
terraform plan -out=mycluster.tfplan

echo ""
read -p "DO YOU WANT TO APPLY THIS PLAN TO DEPLOY THE CLUSTER ON AWS NOW? (yes/no) " apply_confirm
if [[ "$apply_confirm" == "yes" ]]; then
    echo "✅ Applying Terraform plan... This may take several minutes."
    terraform apply "mycluster.tfplan"
    echo ""
    echo "🎉 Deployment complete! You can find your server IPs and SSH commands in the Terraform 'Outputs:' section just above."
else
    echo "🛑 Deployment cancelled by user. No infrastructure was created."
    echo
    echo "✅ You can run 'terraform apply "mycluster.tfplan"' manually when you are ready later."
    echo
fi